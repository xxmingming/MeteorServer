
    message MeteorMsg 
    {
        required MsgType cmd = 1;
        enum MsgType
        {
            ProtocolVerify = 10;//协议匹配,服务器，客户端互发，同一个消息ID
            GetRoomReq = 100;
            GetRoomRsp = 101;
            CreateRoomReq = 102;
            CreateRoomRsp = 103;//建立房间其他人必须刷新，不会给其他人发有房间建立的消息.
            JoinRoomReq = 104;
            JoinRoomRsp = 105;
            OnJoinRoomRsp = 106;//当我进入房间时下发给其他人.
            EnterLevelReq = 107;//请求进入场景，
            EnterLevelRsp = 108;//下发此消息给请求者，下发其他消息告知某人正式进入场景了.同时把帧指令表发送给进入者
            OnEnterLevelRsp = 109;//取得了新进入玩家角色信息给与其他全部玩家
            LeaveRoomReq = 110;//某角色要离开房间.
            LeaveRoomRsp = 119;//不给离开房间者回消息.
            OnLeaveRoomRsp = 111;//某人离开时，发送给其他玩家
            SyncTurnReq = 112;//用户更新自己的输入.一个Turn内 5-10帧的输入
            SyncTurnRsp = 113;//服务器下发场景内全部角色的输入.一个Turn内 5-10帧 所有用户每帧的输入
            KeyFrameReq = 114;//用户上传所有自身属性到服务器做同步，玩家第一次进入场景（当在本地客户端创建完成，发送坐标和旋转，到服务端）
            SyncKeyFrame = 115;//关键帧同步操作，同步全部属性到客户端
            UserDeadSB2C = 116;//角色死亡清理尸体-服务器向客户端发，房间发向房间内的所有角色，在角色死亡5秒后发送
            UserRebornReq = 117;//死亡者-申请复活,在清理尸体后 ,无消息体
            UserRebornSB2C = 118;//其他客户端复活该死亡角色.类似玩家进场
            ChatInRoomReq = 120;//用户在房间内发送信息
            ChatInRoomRsp = 121;//收到某个用户在房间的信息
            ChatInLobbyReq = 122;//用户在大厅的信息
            ChatInLobbyRsp = 123;//收到某个用户在大厅的信息
            EnterQueueReq = 124;//进入组队玩法
            EnterQueueRsp = 125;//进入组队玩法是否成功
            ExitQueueReq = 126;//排队中的玩家离开队伍
            QueueMsgWaitReady = 127;//等待你准备
            QueueMsgCanceled = 128;//由于玩家未确定导致的这一次匹配失败
            QueueMsgReadyReq = 129;//玩家确定排队请求，准备进入选角色界面,某个玩家准备好，上发
            OnBattleBegin = 130;//全部角色都准备好后-进入选角色界面-超时后队伍解散
            OnBattleCancel = 131;//全部准备好后，某个原因导致游戏解散,要写明粗略原因
            UserSelectRole = 132;//某个玩家选择某个角色
            OnUserSelectRole = 133;//其他玩家选择某个角色
            UserSelectSkill = 134;//选择/切换某个技能
            OnUserSelectSkill = 135;//其他玩家选择某个技能
            UserSelectSkin = 136;//选择某个皮肤
            OnUserSelectSkin = 137;//其他玩家选择某个皮肤
            UserQuit = 138;//在选择角色面板退出-引发OnBattleCancel事件
            OnBattleEnterLevel = 139;//全部玩家在超时时间内选择好英雄-技能-皮肤，服务器倒计时完毕，开始进入加载场景界面.
            OnBattleLoading = 140;//在玩家同步加载界面-玩家的加载进度发生变化-服务器发送往客户端
            OnBattleStart = 141;//玩家全部从加载界面离开，进入到战场中
            OnBattleResult = 142;//战斗结束-场景内
            OnBattleResultDetail = 143;//战斗结束后，下发伤害统计报表.
            OnPlayerSellItem = 144;//玩家出售物品
            OnPlayerBuyItem = 145;//玩家购买物品
            OnPlayerQuit = 146;//玩家退出场景,可能是超时检测，也可能是主动退出
            OnPlayerReStart = 147;//某玩家断线后重新开启客户端
            OnPlayerFetchInput = 148;//玩家重连时不断拉取服务器保存的操作序列
            OnPlayerReConnect = 149;//断线重连开始-服务器下发时期内所有玩家的全部操作
        }
        
    }

    message EnterQueueRsp
    {
        required uint32 result = 1;//结果.
        required uint32 playerId = 2;//进入排队玩家分配到的玩家id
        required uint32 playerInQueue = 3;//当前排队人数.
    }

    message OnBattleBegin
    {
        repeated uint32 TeamMemberAId = 1;//自己队伍的ID
        repeated uint32 TeamMemberBId = 2;//对方队伍的ID
        repeated string TeamMemberA = 3;//自己队伍的队友名称-和ID一一对应
        repeated string TeamMemberB = 4;//
    }

    message UserSelectRole
    {
        required uint32 playerId = 1;
        required uint32 HeroId = 2;
    }

    message UserSelectSkill
    {
        required uint32 playerId = 1;
        required uint32 SkillId = 2;
    }
    
    message UserSelectSkin
    {
        required uint32 playerId = 1;
        required uint32 Skin = 2;
    }

    //本次组队被解散
    message OnBattleCanceled
    {
        required uint32 reason = 1;//解散原因
    }

    message OnBattleLoading
    {
        repeated uint32 playerId = 1;//所有玩家ID
        repeated uint32 percent = 2;//所有玩家加载进度
    }

    message OnBattleResult
    {
        required uint32 result = 1;//战斗结果 [1：我方胜利] [0：我方失败]
    }

    message OnBattleResultDetail
    {
        
    }

    //玩家请求售出物品-
    message PlayerSellItem
    {
        required uint32 playerId = 1;
        required uint32 itemId = 2;
    }

    //玩家请求购买物品-
    message PlayerBuyItem
    {
        required uint32 playerId = 1;
        required uint32 itemId = 2;
    }

    message OnPlayerFetchInput
    {
        repeated TurnFrames frames = 1;
    }

    //客户端服务器协议验证-防止网关被随意使用
    message ProtocolVerifyReq
    {
        required uint32 protocol = 1;//协议版本号
        required string data = 2;//客户端-待加密串 = 服务器使用的加密结果-客户端验证加密后的串和服务器传来的结果是否一致.SM3密码
    }

    message ProtocolVerifyRsp
    {
        required uint32 result = 1;//成功或失败.
        required string message = 2;//失败或成功原因.
        required string Secret = 3;//加密后的串.发送回客户端后，客户端使用SM3加密，查看结果是否一致.
    }

    //房间规则是，不限时间，等最后一个人离开后，关闭
    message RoomInfo
    {
        required uint32 roomId = 1;
        required string roomName = 2;
        //required RoomPattern pattern = 1;
        required RoomRule rule = 3;
        required uint32 levelIdx = 4;
        //required int password = 0;//0不要密码 1要密码
        //required string version = "";//版本号1.07 1.08 9.07
        //required int pingTick = 0;
        required uint32 Group1 = 5;
        required uint32 Group2 = 6;
        required uint32 playerCount = 7;
        required uint32 maxPlayer = 8;
        enum RoomRule
        {
            MZ = 1;//盟主
            ROB = 2;//截标
            Defence = 3;//护城
            KillTarget = 4;//暗杀
            Endless = 5;//死斗
            Normal = 6;//单机关卡配置
            Story = 7;//联机进行副本，团队 VS AI
            Moba = 8;//仿MOBA方式
        }
        enum RoomPattern
        {
            _Normal = 1;//普通
            _Replay = 2;//转播
        }
    }

    message OnLeaveRoomRsp
    {
        required uint32 playerId = 2;
    }

    message GetRoomRsp
    {
        repeated RoomInfo RoomInLobby = 2;
    }

    message CreateRoomReq
    {
        required uint32 maxPlayer = 2;
        required uint32 levelIdx = 3;
        required uint32 rule = 4;//规则
        required string roomName = 5;//房间名称.
        required uint32 hpMax = 6;//最大血值.
        required uint32 roundTime = 7;//最大时间
        optional string secret = 8;//密码
        
    }

    message CreateRoomRsp
    {
        required uint32 result = 2;//1确认成功，其他失败,0服务器无法容纳更多房间请换服务器
        required uint32 roomId = 3;//得到房间id.
        required uint32 levelId = 4;//得到房间使用的关卡信息，从这个关卡回复房间
    }

    message JoinRoomReq
    {
        required uint32 roomId = 2;
        required string userNick = 3;
        optional string secret = 4;
    }

    message JoinRoomRsp
    {
        required uint32 result = 2;//1成功，其他失败
        required uint32 reason = 3;//失败为原因编号:1人数达到最大数量 2 没找到
        required uint32 levelIdx = 4;//成功返回房间关卡编号
        required uint32 roomId = 5;//哪个房间.
        required uint32 playerId = 6;//你的角色在服务器的编号.
	    required string userNick = 7;//如果重名，被服务器自动重命名为.
    }

    message EnterLevelReq
    {
        required uint32 camp = 2;
        required uint32 model = 3;
        required uint32 weapon = 4;
    }

    message EnterLevelRsp
    {
        optional SceneInfo scene = 1;//场景信息
    }

    //当其他人进入房间-还未进入场景（在选人界面）
    message OnEnterRoomRsp
    {
        required string playerNick = 1;
    }

    //当其他人进入场景
    message OnEnterLevelRsp
    {
        required Player_ player = 1;
    }
    
    //定点数，3位小数.
    message Vector2_
    {
        required int32 x = 1;
        required int32 y = 2;
    }

    message Vector3_
    {
        required int32 x = 1;
        required int32 y = 2;
        required int32 z = 3;
    }

    message Quaternion_
    {
        required int32 x = 1;
        required int32 y = 2;
        required int32 z = 3;
        required int32 w = 4;
    }

    message SceneInfo
    {
        repeated SceneItem_ items = 1;//场景里所有箱子，可破坏物件，机关
        repeated Player_ players = 2;//场景里所有角色
    }
    
    message SceneItem_
    {
        required string model = 1;
        required Vector3_ pos = 2;
        required Quaternion_ rotation = 3;
        required int32 frame = 4;//有动画的，必须带帧数
    }

    message Player_
    {
        required uint32 id = 1;
        required string name = 2;
        required uint32 weapon1 = 3;
        required uint32 weapon2 = 4;
        required uint32 weapon = 5;
        required uint32 weapon_pos = 6;//乾坤刀等武器有第二个pos
        required Vector3_ pos = 7;//根的位置
        required Quaternion_ rotation = 8;//根的旋转
        required int32 model = 9;
        required int32 aniSource = 10;//当前使用哪个动作源
        required int32 frame = 11;//当前动画帧序号
        required int32 hpMax = 12;
        required int32 hp = 13;
        required int32 angry = 14;
        required int32 Camp = 15;//阵营.
        required int32 SpawnPoint = 16;//出生点.只有初始化使用
    }

    //InputReq和SyncInput都用这个消息体
    message InputReq
    {
        repeated Input_ input = 1;
    }
    
    message Input_
    {
        required uint32 playerId = 1;
        repeated InputFrame frames = 2;
    }
    
    message TurnFrames
    {
        required uint32 turnIndex = 1;//turn序号
        repeated Input_ Inputs = 2;
    }

    //角色死亡服务器向全体客户端通知，清理该死亡角色
    message UserId
    {
        repeated uint32 Player = 1;//死亡和复活时的ID列表    
    }

    //每一帧的按键状态,一个turn内，每一帧的
    message InputFrame
    {
        required Vector2_ JoyStick = 2;//IOS有
        required Vector2_ MouseDelta = 3;//鼠标偏移
        required bytes w = 4;
        required bytes s = 5;
        required bytes a = 6;
        required bytes d = 7;
        required bytes jump = 8;//跳跃
        required bytes break = 9;//爆气
        required bytes attack = 10;//攻击
        required bytes e = 11;//切换装备
        required bytes r = 12;//挑衅
        required bytes y = 13;//装死
        required bytes space = 14;//防御
        required bytes c = 15;//蹲下
    }

    //聊天消息.
    message ChatMsg
    {
        required uint32 playerId = 1;//玩家
        required uint32 channelType = 2;//频道类型 1-大厅 2-战场
        required string chatMessage = 3;//max 256
    }